name: ci

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

env:
  IMAGE_NAME: ditto-operator

jobs:
  lint-chart:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.0

      - name: Run chart-testing (lint)
        run: ct lint --config .github/ct.yaml

  build:
    name: build
    runs-on: ubuntu-18.04
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Store artifact
        uses: actions/upload-artifact@v1
        with:
          name: binary
          path: target/release/ditto-operator

      - name: Create image
        run: |
          docker build -f .github/Dockerfile -t $IMAGE_NAME .

      - name: Login to github container repository
        if: ${{github.head_ref == ''}} # only for non-PRs
        run: echo "${{ secrets.GHCR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to github container repository
        if: ${{github.head_ref == ''}} # only for non-PRs
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  install-chart:
    name: install-chart
    runs-on: ubuntu-18.04
    if: ${{github.head_ref == ''}} # only for non-PRs
    needs:
      - lint-chart
      - build
    strategy:
      matrix:
        k8s:
          # the versions supported by chart-testing are the tags
          # available for the docker.io/kindest/node image
          # https://hub.docker.com/r/kindest/node/tags
          - v1.16.15
          - v1.17.17
          - v1.18.15
          - v1.19.7
          - v1.20.2
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.0

      - name: Create kind ${{ matrix.k8s }} cluster
        uses: helm/kind-action@v1.0.0
        with:
          config: .github/kind-config.yaml
          node_image: kindest/node:${{ matrix.k8s }}

      - name: Run chart-testing (install)
        run: |
          REPO=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=${REPO}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Tag: ${VERSION}"

          # work around shortcomings of "ct"
          mkdir -p helm/ditto-operator/ci
          (cat <<EOF
          image:
            repository: ${IMAGE_ID}
            tag: ${VERSION}
            pullPolicy: Always
          EOF
          ) > helm/ditto-operator/ci/ci-values.yaml

          ct install --config .github/ct.yaml
